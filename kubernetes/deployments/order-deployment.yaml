apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-processing
spec:
  replicas: 3  # Mantém sempre 3 Pods rodando para alta disponibilidade
  selector:
    matchLabels:
      app: order-processing  # O Service precisa encontrar os Pods por esse label
  template:
    metadata:
      labels:
        app: order-processing  # O label dentro dos Pods deve ser o mesmo
    spec:
      containers:
        - name: order-processing
          image: amaurii/order-processing:latest  # Imagem do seu container
          ports:
            - containerPort: 8080  # A aplicação escuta nessa porta
          env:
            - name: MONGO_URL
              value: "mongodb://mongo-service:27017/orders_db"
            - name: RABBITMQ_HOST
              value: "rabbitmq-service"
            - name: REDIS_HOST
              value: "redis-service"
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
          livenessProbe:  # Verifica se o pod está vivo
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:  # Verifica se o pod está pronto para receber tráfego
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: order-processing
spec:
  selector:
    app: order-processing  # O Service encontra os Pods do Deployment
  ports:
    - protocol: TCP
      port: 80        # O Service escuta na porta 80
      targetPort: 8080  # Direciona o tráfego para a porta 8080 do container
      nodePort: 32080  # Disponível externamente via NodePort
  type: NodePort
